package faultinfo

// Code generated by genserver.go. DO NOT EDIT.

import (
	"net/http"
)

func GetCommentListHandler(w http.ResponseWriter, r *http.Request) {
	id := mux.Vars(r)["id"]
	out, err := logic.GetCommentList(id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func CreateCommentHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	id := mux.Vars(r)["id"]
	var req CreateComment
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	out, err := logic.CreateComment(id, req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func GetCommentDetailHandler(w http.ResponseWriter, r *http.Request) {
	infoId := mux.Vars(r)["info_id"]
	commentId := mux.Vars(r)["comment_id"]
	out, err := logic.GetCommentDetail(info_id, comment_id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func UpdateCommentHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	infoId := mux.Vars(r)["info_id"]
	commentId := mux.Vars(r)["comment_id"]
	var req CreateComment
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	out, err := logic.UpdateComment(info_id, comment_id, req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func DeleteCommentHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	infoId := mux.Vars(r)["info_id"]
	commentId := mux.Vars(r)["comment_id"]
	out, err := logic.DeleteComment(info_id, comment_id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func GetInformationTypelistHandler(w http.ResponseWriter, r *http.Request) {
	out, err := logic.GetInformationTypelist()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func CreateInformationTypeHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	var req CreateInfoType
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	out, err := logic.CreateInformationType(req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func DeleteInformationTypeHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	typ := mux.Vars(r)["typ"]
	out, err := logic.DeleteInformationType(typ)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func GetInformationTemplateIDListHandler(w http.ResponseWriter, r *http.Request) {
	out, err := logic.GetInformationTemplateIDList()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func CreateInformationTemplateHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	var req CreateTemplate
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	out, err := logic.CreateInformationTemplate(req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func GetInformationTemplateDetailHandler(w http.ResponseWriter, r *http.Request) {
	id := mux.Vars(r)["id"]
	out, err := logic.GetInformationTemplateDetail(id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func DeleteInformationTemplateHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	id := mux.Vars(r)["id"]
	out, err := logic.DeleteInformationTemplate(id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func GetInformationListHandler(w http.ResponseWriter, r *http.Request) {
	out, err := logic.GetInformationList()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func CreateInformationHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	var req CreateInformation
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	out, err := logic.CreateInformation(req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func GetInformationDetailHandler(w http.ResponseWriter, r *http.Request) {
	id := mux.Vars(r)["id"]
	out, err := logic.GetInformationDetail(id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func UpdateInformationHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	id := mux.Vars(r)["id"]
	var req CreateInformation
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	out, err := logic.UpdateInformation(id, req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func DeleteInformationHandler(w http.ResponseWriter, r *http.Request) {
	authHeader := strings.Split(r.Header.Get("Authorization"))
	if len(authHeader) != 2 || authHeader[0] != "Bearer" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	bearerToken := authHeader[1]
	id := mux.Vars(r)["id"]
	out, err := logic.DeleteInformation(id)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}
